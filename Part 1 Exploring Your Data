# Import pandas
import pandas as pd

# Read the file into a DataFrame: df
df = pd.read_csv("dob_job_application_filings_subset.csv")

# Print the head of df
print(df.head())

# Print the tail of df
print(df.tail())

# Print the shape of df rows,columns
print(df.shape)

# Print the columns of df
print(df.columns)

# Print the head and tail of df_subset
print(df_subset.head())
print(df_subset.tail())

# The .info() method provides important information about a DataFrame
# Such as the number of rows, number of columns, number of non-missing values in each column, and the data type stored in each column.

# Print the info of df
print(df.info())

# Print the info of df_subset
print(df_subset.info())


# Frequency Count 
# Frequency count for Continuous Variable
df.describe()

# Frequency count for Categorical Variable
# So how can you diagnose data issues when you have categorical data?
# One way is by using the .value_counts() method, which returns the frequency counts for each unique value in a column!

# This method also has an optional parameter called dropna which is True by default.
# What this means is if you have missing data in a column, it will not give a frequency count of them.
# You want to set the dropna column to False so if there are missing values in a column, it will give you the frequency counts.

# Print the value counts for 'Borough'
print(df['Borough'].value_counts(dropna=False))


# Visualizing single variables with histograms
# The .plot() method allows you to create a plot of each column of a DataFrame.
# The kind parameter allows you to specify the type of plot to use - kind='hist', for example, plots a histogram.
# Using the .describe() method. we'll notice that there are extremely large differences between the min and max values,
# and the plot will need to be adjusted accordingly. In such cases, it's good to look at the plot on a log scale.
# The keyword arguments logx=True or logy=True can be passed in to .plot() depending on which axis you want to rescale.

# Import matplotlib.pyplot
import matplotlib.pyplot as plt

# Describe the column
df['Existing Zoning Sqft'].describe()

# Plot the histogram
df['Existing Zoning Sqft'].plot(kind='hist', rot=70, logx=True, logy=True)

# Display the histogram
plt.show()

# Visualizing multiple variables with boxplots
# Histograms are great ways of visualizing single variables.
# To visualize multiple variables, boxplots are useful, especially when one of the variables is categorical.

# Import necessary modules
import pandas as pd
import matplotlib.pyplot as plt

# Create the boxplot
df.boxplot(column='initial_cost', by='Borough', rot=90)

# Display the plot
plt.show()

# Visualizing multiple variables with scatter plots
# Boxplots are great when you have a numeric column that you want to compare across different categories.
# When you want to visualize two numeric columns, scatter plots are ideal.

# Import necessary modules
import pandas as pd
import matplotlib.pyplot as plt

# Create and display the first scatter plot
df.plot(kind='scatter', x='initial_cost', y='total_est_fee', rot=70)
plt.show()

# Create and display the second scatter plot
df_subset.plot(kind='scatter', x='initial_cost', y='total_est_fee', rot=70)
plt.show()
