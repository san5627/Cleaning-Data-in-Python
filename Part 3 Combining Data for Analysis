# Combining rows of data

# Concatenate uber1, uber2, and uber3: row_concat
row_concat = pd.concat([uber1, uber2, uber3])

# Print the shape of row_concat
print(row_concat.shape)

# Print the head of row_concat
print(row_concat.head())

# Combining columns of data
# Think of column-wise concatenation of data as stitching data together from the sides instead of the top and bottom.
# To perform this action, you use the same pd.concat() function, but this time with the keyword argument axis=1.
# The default, axis=0, is for a row-wise concatenation.

# Concatenate ebola_melt and status_country column-wise: ebola_tidy
ebola_tidy = pd.concat([ebola_melt, status_country], axis = 1)

# Print the shape of ebola_tidy
print(ebola_tidy.shape)

# Print the head of ebola_tidy
print(ebola_tidy.head())


# Finding files that matches pattern
# Import necessary modules
import glob
import pandas as pd

# Write the pattern: pattern
pattern = '*.csv'

# Save all file matches: csv_files
csv_files = glob.glob(pattern)

# Print the file names
print(csv_files)

# Load the second file into a DataFrame: csv2
csv2 = pd.read_csv(csv_files[1])

# Print the head of csv2
print(csv2.head())

# Iterating and concatenating all matches
# Create an empty list: frames
frames = []

#  Iterate over csv_files
for csv in csv_files:
    #  Read csv into a DataFrame: df
    df = pd.read_csv(csv)
    # Append df to frames
    frames.append(df)

# Concatenate frames into a single DataFrame: uber
uber = pd.concat(frames)

# Print the shape of uber
print(uber.shape)

# Print the head of uber
print(uber.head())

# 1-to-1 data merge
# Merging data allows you to combine disparate datasets into a single dataset to do more complex analysis.

# Merge the site and visited DataFrames on the 'name' column of site and 'site' column of visited.
# Merge the DataFrames: o2o
o2o = pd.merge(left=site, right=visited, left_on='name', right_on='site')

# Print o2o
print(o2o)

# Many-to-1 data merge
# In a many-to-one (or one-to-many) merge, one of the values will be duplicated and recycled in the output.
# That is, one of the keys in the merge is not unique.

# Many-to-many data merge
# The final merging scenario occurs when both DataFrames do not have unique keys for a merge.
# What happens here is that for each duplicated key, every pairwise combination will be created.
